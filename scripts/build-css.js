import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const stylesDir = path.resolve(__dirname, '..', 'styles');
const outputFile = path.join(stylesDir, 'browser.css');

const groups = [
  'base',
  'components',
  'widgets',
  'workspaces',
  'overlays'
];

const header = `/*
 * This file is generated by scripts/build-css.js.
 * Edit the source modules in styles/{${groups.join(', ')}}/ and run npm run build:css.
 */\n\n`;

async function ensureDirectories() {
  await Promise.all(
    groups.map(async (group) => {
      const dir = path.join(stylesDir, group);
      await fs.mkdir(dir, { recursive: true });
    })
  );
}

async function collectGroupFiles(group) {
  const dir = path.join(stylesDir, group);
  const entries = await fs.readdir(dir, { withFileTypes: true }).catch((error) => {
    if (error.code === 'ENOENT') {
      return [];
    }
    throw error;
  });

  return entries
    .filter((entry) => entry.isFile() && entry.name.endsWith('.css'))
    .map((entry) => entry.name)
    .sort((a, b) => a.localeCompare(b, undefined, { numeric: true }));
}

async function buildCss() {
  await ensureDirectories();

  const chunks = [];

  for (const group of groups) {
    const files = await collectGroupFiles(group);

    for (const file of files) {
      const filePath = path.join(stylesDir, group, file);
      const contents = await fs.readFile(filePath, 'utf8');
      const label = `/* styles/${group}/${file} */\n`;
      chunks.push(label + contents.trimEnd() + '\n\n');
    }
  }

  const output = header + chunks.join('');
  await fs.writeFile(outputFile, output.trimEnd() + '\n');
}

buildCss().catch((error) => {
  console.error('Failed to build styles/browser.css');
  console.error(error);
  process.exitCode = 1;
});
